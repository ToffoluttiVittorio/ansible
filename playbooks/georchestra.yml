- name: georchestra deployment
  hosts: mygeorchestra
  # note: above host must match the content of the "hosts" file
  become: yes
  roles:
    - georchestra
    - { role: elastic.elasticsearch, tags: es }
    - { role: geerlingguy.kibana, tags: kibana }
  vars:
    kibana_server_host: "127.0.0.1"
    es_version: 7.14.0
    es_data_dirs:
      - "/srv/elasticsearch/data"
    es_log_dir: "/srv/elasticsearch/logs"
    es_config:
      cluster.name: "{{ georchestra.fqdn }}"
      bootstrap.memory_lock: true
    es_heap_size: 1g
    cadastrapp: {
      enabled: false,
      db: {
        name: georchestra,
        user: georchestra,
        schema: cadastrapp,
        pass: georchestra
      },
      qgisdb: {
        host: localhost,
        port: 5432,
        name: georchestra,
        user: georchestra,
        pass: georchestra,
        schema: qadastre
      },
      gitrepo: "https://github.com/georchestra/cadastrapp",
      gitversion: master,
      debsrc: {
        path: /data/src/georchestra/cadastrapp/cadastrapp/target/,
        pkg: georchestra-cadastrapp_99.master.202108020909~80b14a6-1_all.deb,
        host: build.fluela
      },
      workdir: /tmp/cadastrapp/tmp
    }
    # Set here your Github token, which should at least have the 'actions' scope
    github_action_token: secret
    mapstore: {
      enabled: True,
      repo: georchestra/mapstore2-georchestra,
      artifact_id: 80579941,
      artifact_sha256: ca15083c9adf5ba20963c86ede1c887c15613792
    }
    openldap: {
      topdc: georchestra,
      basedn: "dc=georchestra,dc=org", # has to be in the form dc={{ topdc }},dc=xx
      rootdn: "cn=admin,dc=georchestra,dc=org",
      rootpw: secret,
      gitrepo: "https://raw.github.com/georchestra/georchestra",
      ldifs: [
      bootstrap,
      docker-root/georchestraSchema,
      docker-root/etc/ldap.dist/modules/groupofmembers,
      docker-root/etc/ldap.dist/modules/openssh,
      docker-root/memberof,
      root,
      docker-root/georchestra
      ],
      gitversion: master
    }
    georchestra: {
      fqdn: georchestra.example.org,
      ign_api_key: luvs4p9c4yq5ewfwqcqgm83f, #invalid key
      db: {
        name: georchestra,
        user: georchestra,
        pass: georchestra
      },
      datadir: {
        path: /etc/georchestra,
        gitrepo: "https://github.com/georchestra/datadir",
        gitversion: master
      },
      debian: {
        repo: "deb https://packages.georchestra.org/debian master main",
        key: "https://packages.georchestra.org/debian/key.asc"
      }
    }
    geonetwork: {
      db: {
        schema: geonetwork,
        user: geonetwork,
        pass: geonetwork
      },
      datadir: {
        path: /srv/data/geonetwork/,
        gitrepo: "https://github.com/georchestra/geonetwork_minimal_datadir",
        gitversion: gn3.8.2
      }
    }
    geoserver: {
      privileged: {
        user: geoserver_privileged_user,
        pass: gerlsSnFd6SmM
      },
      datadir: {
        path: /srv/data/geoserver/,
        gitrepo: "https://github.com/georchestra/geoserver_minimal_datadir",
        gitversion: master
      },
      wms_srslist: [2154, 3857, 3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 4171, 4258, 4326, 23030, 23031, 23032, 32630, 32631, 32632, 4171, 4271, 3758]
    }
    geowebcache_datadir: /srv/data/geowebcache/
    extractor_datadir: /srv/data/extractor/
    tomcat_keystore_pass: tomcatkstp
    tomcat_basedir: /srv/tomcat
    system_locale: en_US.UTF-8
    logs_basedir: /srv/log
    force_https: true #set to false if running behind a reverse proxy that does SSL
    console_adminemail: admin@example.org
    console_captcha: {
      # if empty, captcha during registration will be disabled
      privateKey: '',
      publicKey: '',
    }
    tomcat_instances: {
      proxycas: {
        port: 8180,
        control_port: 8105,
        xms: 256m,
        xmx: 512m
      },
      georchestra: {
        port: 8280,
        control_port: 8205,
        xms: 1G,
        xmx: 2G
      },
      geoserver: {
        port: 8380,
        control_port: 8305,
        xms: 1G,
        xmx: 1G
      }
    }
    georchestra_wars:
      analytics:
        pkg: georchestra-analytics
        tomcat: georchestra
        enabled: True
      cas:
        pkg: georchestra-cas
        tomcat: proxycas
        enabled: True
      extractorapp:
        pkg: georchestra-extractorapp
        tomcat: georchestra
        enabled: True
      geonetwork:
        # one can use an URL to fetch the webapps
        # but they should point onto a ZIP file containing the WAR,
        # this limitation comes from github which provides the artifacts in a zipped archive.
        url: https://api.github.com/repos/georchestra/geonetwork/actions/artifacts/84847691/zip
        tomcat: georchestra
        enabled: True
      mapstore:
        url: https://api.github.com/repos/{{ mapstore.repo }}/actions/artifacts/{{ mapstore.artifact_id }}/zip
        tomcat: georchestra
        artifact_sha256: "{{ mapstore.artifact_sha256 }}"
        enabled: "{{ mapstore.enabled }}"
      geoserver:
        pkg: georchestra-geoserver
        tomcat: geoserver
        enabled: True
      geowebcache:
        pkg: georchestra-geowebcache
        tomcat: georchestra
        enabled: True
      header:
        pkg: georchestra-header
        tomcat: georchestra
        enabled: True
      console:
        pkg: georchestra-console
        tomcat: georchestra
        enabled: True
      mapfishapp:
        pkg: georchestra-mapfishapp
        tomcat: georchestra
        enabled: True
      cadastrapp:
        pkg: georchestra-cadastrapp
        tomcat: georchestra
        enabled: True
      ROOT:
        pkg: georchestra-security-proxy
        tomcat: proxycas
        enabled: True
    datafeeder:
      enabled: true
      port: 8480

  tasks:
    - name: reconfigure Kibana after geerlingguy.kibana
      copy:
        src: resources/kibana.yml
        dest: /etc/kibana/kibana.yml
        owner: root
        group: root
        mode: '0644'
      notify: restart kibana

  handlers:
    - name: restart kibana
      service: name=kibana state=restarted
